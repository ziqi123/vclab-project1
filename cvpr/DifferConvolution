import numpy as np
import cv2
import matplotlib.pyplot as plt
import math
import scipy
from scipy import signal

'''
# 高斯模板
k_size = 11
sigma = 1
height, width, channel = source.shape


def generateGaussianTemplate(window, k_size, sigma):
    pi = math.pi
    sum = 0.0
    # 以模板的中心为原点
    center = k_size / 2
    for i in range(0, k_size):
        x2 = pow(i - center, 2)
        for j in range(0, k_size):
            y2 = pow(j - center, 2)
            tmp = np.exp(-((x2 + y2) / (2 * sigma * sigma)))
            tmp /= (2 * pi * sigma * sigma)
            window[i, j] = tmp
            sum += window[i, j]
    for i in range(0, k_size):
        for j in range(0, k_size):
            window[i, j] /= sum
            print(window[i][j], end="\t")
        print()


window = np.zeros([k_size, k_size])
generateGaussianTemplate(window, k_size, sigma)


#valid convolution
result = source.copy()
for i in range(1, height - 1):
    for j in range(1, width - 1):
        sum = sum1 = sum2 = sum3 = 0
        for m in range(i - 1, i + 2):
            for n in range(j - 1, j + 2):
                if channel == 1:
                    sum = sum + result[m][n] * window[m - i][n - j]
                else:
                    sum1 += source[m][n][0] * window[m - i][n - j]
                    sum2 += source[m][n][1] * window[m - i][n - j]
                    sum3 += source[m][n][2] * window[m - i][n - j]
        if channel == 1:
            result[i][j] = sum / (k_size * k_size)
        else:
            result[i][j][0] = sum1 / (k_size * k_size)
            result[i][j][1] = sum2 / (k_size * k_size)
            result[i][j][2] = sum3 / (k_size * k_size)
result = np.clip(result, 0, 255)
result = result[0: 0+height, 0: 0+width].astype(np.uint8)

# full convolution
# zero padding
pad = k_size
result = np.zeros((height + pad * 2, width + pad * 2, channel), dtype=np.float)
result[pad: pad + height, pad: pad + width] = source.copy().astype(np.float)

for y in range(height):
    for x in range(width):
        for c in range(channel):
            result[pad + y, pad + x, c] = np.sum(window * source[y: y + k_size, x: x + k_size, c])
    result = np.clip(result, 0, 255)
    result = result[pad: pad + height, pad: pad + width].astype(np.uint8)
# same convolution
#same convolution
def gaussian_filter(img, K_size=3, sigma=1.3):
    if len(img.shape) == 3:

        H, W, C = img.shape

    else:

        img = np.expand_dims(img, axis=-1)

        H, W, C = img.shape

    ## Zero padding

    pad = K_size // 2

    out = np.zeros((H + pad * 2, W + pad * 2, C), dtype=np.float)

    out[pad: pad + H, pad: pad + W] = img.copy().astype(np.float)

    ## prepare Kernel

    K = np.zeros((K_size, K_size), dtype=np.float)

    for x in range(-pad, -pad + K_size):

        for y in range(-pad, -pad + K_size):
            K[x + pad, y + pad] = np.exp(-(x ** 2 + y ** 2) / (2 * (sigma ** 2)))

    K /= (2 * np.pi * sigma * sigma)

    K /= K.sum()

    for x in (-pad, -pad + K_size):
        for y in (-pad, -pad + K_size):
            print(K[x][y], end='\t')
            print()

    tmp = out.copy()

    # filtering

    for y in range(H):

        for x in range(W):

            for c in range(C):
                out[pad + y, pad + x, c] = np.sum(K * tmp[y: y + K_size, x: x + K_size, c])

    out = np.clip(out, 0, 255)

    out = out[pad: pad + H, pad: pad + W].astype(np.uint8)

    return out


out = gaussian_filter(img, K_size=3, sigma=1.3)

cv2.imwrite("out.jpg", out)

cv2.imshow("result", out)

cv2.waitKey(0)

cv2.destroyAllWindows()
'''

'''
#full convolution
def gaussian_filter(img, K_size=3, sigma=1.3):
    if len(img.shape) == 3:
        H, W, C = img.shape
    else:
        img = np.expand_dims(img, axis=-1)
        H, W, C = img.shape

    ## Zero padding
    pad = K_size
    out = np.zeros((H + pad * 2, W + pad * 2, C), dtype=np.float)
    out[pad: pad + H, pad: pad + W] = img.copy().astype(np.float)
    ## prepare Kernel

    K = np.zeros((K_size, K_size), dtype=np.float)
    for x in range(-pad, -pad + K_size):
        for y in range(-pad, -pad + K_size):
            K[x + pad, y + pad] = np.exp(-(x ** 2 + y ** 2) / (2 * (sigma ** 2)))
    K /= (2 * np.pi * sigma * sigma)
    K /= K.sum()
    for x in (-pad, -pad + K_size):
        for y in (-pad, -pad + K_size):
            print(K[x][y], end='\t')
            print()
    tmp = out.copy()

    # filtering

    for y in range(H):
        for x in range(W):
            for c in range(C):
                out[pad + y, pad + x, c] = np.sum(K * tmp[y: y + K_size, x: x + K_size, c])
    out = np.clip(out, 0, 255)
    out = out[pad: pad + H, pad: pad + W].astype(np.uint8)
    return out

out = gaussian_filter(img, K_size=3, sigma=1.3)
cv2.imwrite("out.jpg", out)
cv2.imshow("result", out)
cv2.waitKey(0)
cv2.destroyAllWindows()
'''

'''
# valid convolution
def gaussian_filter(img, K_size=3, sigma=1.3):
    if len(img.shape) == 3:
        H, W, C = img.shape

    else:
        img = np.expand_dims(img, axis=-1)
        H, W, C = img.shape

    ## Zero padding

    pad = 0
    out = np.zeros((H + pad * 2, W + pad * 2, C), dtype=np.float)
    out[pad: pad + H, pad: pad + W] = img.copy().astype(np.float)

    ## prepare Kernel

    K = np.zeros((K_size, K_size), dtype=np.float)
    for x in range(-pad, -pad + K_size):
        for y in range(-pad, -pad + K_size):
            K[x + pad, y + pad] = np.exp(-(x ** 2 + y ** 2) / (2 * (sigma ** 2)))
    K /= (2 * np.pi * sigma * sigma)
    K /= K.sum()
    for x in (-pad, -pad + K_size):
        for y in (-pad, -pad + K_size):
            print(K[x][y], end='\t')
            print()
    tmp = out.copy()

    # filtering

    for y in range(K_size, H - K_size):
        for x in range(K_size, W - K_size):
            for c in range(C):
                out[pad + y, pad + x, c] = np.sum(K * tmp[y: y + K_size, x: x + K_size, c])
    out = np.clip(out, 0, 255)
    out = out[pad: pad + H, pad: pad + W].astype(np.uint8)
    return out


out = gaussian_filter(img, K_size=3, sigma=1.3)
cv2.imwrite("out.jpg", out)
cv2.imshow("result", out)
cv2.waitKey(0)
cv2.destroyAllWindows()

'''
# 导入图像
img = cv2.imread('test.png')


# source = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)

def Gaussian(v, std):
    x = v[0]
    y = v[1]
    return np.exp(-((x ** 2) + (y ** 2)) / 2 * std * std)

x = np.linspace(-3, 3, 121)
xy = np.meshgrid(x, x)
k = Gaussian(xy, 5)
k = k[::20, ::20]

img1 = signal.convolve(img, k, mode="valid")
img2 = signal.convolve(img, k, mode="full")
img3 = signal.convolve(img, k, mode="same")

images = [img, img1, img2, img3]
titles = ['img', 'valid', 'full', 'same']
plt.subplot(1, 3, 1)
plt.imshow(images[0], 'gray')
plt.title(titles[0])
plt.subplot(1, 3, 2)
plt.imshow(images[1], 'gray')
plt.title(titles[1])
plt.subplot(1, 3, 3)
plt.imshow(images[2], 'gray')
plt.title(titles[2])
plt.show()
